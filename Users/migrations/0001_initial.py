# Generated by Django 5.0.7 on 2024-09-07 15:06

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='skillList',
            fields=[
                ('skillID', models.BigAutoField(primary_key=True, serialize=False)),
                ('skillName', models.CharField(max_length=50, verbose_name=[('Opcion1', 'Opcion1'), ('Opcion2', 'Opcion2')])),
                ('skillCategory', models.CharField(max_length=30, verbose_name=[('Opcion1', 'Opcion1'), ('Opcion2', 'Opcion2')])),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('userIsWorker', models.BooleanField(default=False)),
                ('userMembership', models.CharField(blank=True, max_length=30, null=True)),
                ('userGender', models.CharField(choices=[('Hombre', 'Hombre'), ('Mujer', 'Mujer'), ('Otro', 'Otro')], max_length=30)),
                ('userBirthDate', models.DateField(blank=True, null=True)),
                ('userLocation', models.CharField(blank=True, max_length=30, null=True)),
                ('userDescription', models.TextField(blank=True, max_length=500, null=True)),
                ('userProvince', models.CharField(blank=True, max_length=30, null=True)),
                ('userCity', models.CharField(blank=True, max_length=30, null=True)),
                ('userPostalCode', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('account', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(related_name='custom_user_groups', to='auth.group')),
                ('user_permissions', models.ManyToManyField(related_name='custom_user_permissions', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserSkills',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, null=True)),
                ('hasExperience', models.BooleanField(default=False)),
                ('yearsOfExperience', models.PositiveSmallIntegerField()),
                ('isVerified', models.BooleanField(default=False)),
                ('skillID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Users.skilllist')),
                ('userID', models.ManyToManyField(related_name='skills', to='Users.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='CertificationData',
            fields=[
                ('certificateID', models.BigAutoField(primary_key=True, serialize=False)),
                ('institution', models.CharField(max_length=255)),
                ('certificateDate', models.DateField()),
                ('file', models.FileField(upload_to='certifications/')),
                ('skillID', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='certification', to='Users.userskills')),
            ],
        ),
        migrations.CreateModel(
            name='UserWorkData',
            fields=[
                ('workerID', models.BigAutoField(primary_key=True, serialize=False)),
                ('MinPayment', models.FloatField()),
                ('isStudying', models.BooleanField(default=False)),
                ('userProfession', models.CharField(max_length=50)),
                ('userID', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='work_data', to='Users.userprofile')),
            ],
        ),
    ]
